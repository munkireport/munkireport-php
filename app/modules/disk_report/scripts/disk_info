#!/usr/bin/python
"""Mac OS X Disk/Volume script for munkireport.
https://github.com/munkireport/munkireport-php

Some ideas and functions are borrowed from gmacpyutil
https://github.com/google/macops

The script iterates over all partitions and returns a list
of Volumes with basic info (TotalSize, FreeSpace, MountPoint, VolumeName)

It also reports SMARTStatus from the underlying Physical Disk(s)
in case of a AppleRAID or CoreStorage Volume

Disk sizes are converted to strings with a precision of .5GB

"""

import subprocess
import plistlib
import sys
import os

# Skip manual check
if len(sys.argv) > 1:
    if sys.argv[1] == 'manualcheck':
        print 'Manual check: skipping'
        exit(0)

# Round to .5GB precision (29 bit)
def _HalfGB(size):
    return size >> 29 << 29

# Return OS X version
def _OSVersion():
    proc = subprocess.Popen(['/usr/bin/sw_vers','-productVersion'], stdout=subprocess.PIPE)
    output = proc.stdout.read()

    return output.split('.')[1]

def _DictFromDiskutilList():
    """calls diskutil list -plist and returns as dict."""

    command = ["/usr/sbin/diskutil", "list", "-plist"]
    return _DictFromSubprocess(command)

def _DictFromDiskutilList_SnowLeopard():
    """as Snow Leopard delivers a different output from diskutil 
    list we will mimic the output from newer versions of OS X

    """
    Partitions = _DictFromDiskutilList()["AllDisks"]
    DiskArray = []

    for Partition in Partitions:
        DiskArray.append(_DictFromDiskutilInfo(Partition))

    plist = [{'Content':'Guid', 'Partitions':DiskArray,}]
    plistfile = '%s/cache/SL_tmpdisk.plist' % os.path.dirname(os.path.realpath(__file__))
    plistlib.writePlist(plist, plistfile)
    return plistlib.readPlist(plistfile)

def _DictFromDiskutilInfo(deviceid):
    """calls diskutil info for a specific device id.

    Args:
        deviceid: a given device id for a disk like object
    Returns:
        info: dictionary from resulting plist output
    """
    command = ["/usr/sbin/diskutil", "info", "-plist", deviceid]
    return _DictFromSubprocess(command)

def _DictFromDiskutilCsInfo(deviceid):
    """calls diskutil cs info for a specific device id.

    Args:
        deviceid: a given device id for a disk like object
    Returns:
        info: dictionary from resulting plist output
    """
    command = ["/usr/sbin/diskutil", "cs", "info", "-plist", deviceid]
    return _DictFromSubprocess(command)

def filteredDiskInfo(deviceid):
    """ Returns a filtered dictionary """

    attrs = _DictFromDiskutilInfo(deviceid)

    keys = ["BusProtocol", "Content", "CoreStorageCompositeDisk",
            "CoreStorageEncrypted", "CoreStorageLVGUUID", "Ejectable",
            "FreeSpace", "Internal",  "MountPoint", "RAIDMaster",
            "RAIDMemberUUID", "RAIDSetMembers", "SMARTStatus",
            "SolidState", "TotalSize", "VolumeName"]

    out = {}
    for key in keys:
        try:
            out[key] = attrs[key]
        # pylint: disable=pointless-except
        except KeyError:  # not all objects have all these attributes
            pass

    # Set sizes to string with .5GB precision
    if out.get('TotalSize'):
        out['TotalSize'] = str(_HalfGB(out['TotalSize']));

    if out.get('FreeSpace'):
        out['FreeSpace'] = str(_HalfGB(out['FreeSpace']));

    return out

def AllDisksAndPartitions():
    """Returns list of all disks and partitions."""
    try:
        if _OSVersion() == "6":
            return _DictFromDiskutilList_SnowLeopard()
        else:
            return _DictFromDiskutilList()["AllDisksAndPartitions"]
    except KeyError:
        # TODO(user): fix errors to actually provide info...
        raise Exception("Unable to list all partitions.")


def _DictFromSubprocess(command, stdin=None):
    """returns a dict based upon a subprocess call with a -plist argument.

    Args:
        command: the command to be executed as a list
        stdin: any standard input required.
    Returns:
        dict: dictionary from command output
    Raises:
        Exception: Error running command
        Exception: Error creating plist from standard output
    """

    task = {}

    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()

    if p.returncode is not 0:
        raise Exception("Error running command: %s, stderr: %s" %
                                             (command, stderr))
    else:
        try:
            return plistlib.readPlistFromString(stdout)
        except xml.parsers.expat.ExpatError:
            raise Exception("Error creating plist from output: %s" % stdout)

def DiskReport():
    """ Retrieve a list of dicts containing disk info """
    volumeList = []
    coreStorageDict = {}
    appleRaidDict = {}
    searchCS = False

    for disk in AllDisksAndPartitions():

        if getattr(disk, 'Partitions', None):
            for partition in disk.Partitions:

                if partition.Content == 'Apple_HFS':
                    diskInfo = filteredDiskInfo(partition.DeviceIdentifier)
                    if diskInfo['BusProtocol'] == 'Disk Image':
                        # Skip Disk Images
                        continue
                    volumeList.append(diskInfo)

                elif partition.Content == 'Apple_CoreStorage':
                    diskInfo = filteredDiskInfo(partition.DeviceIdentifier)
                    if diskInfo.get('CoreStorageLVGUUID'):
                        coreStorageDict[diskInfo['CoreStorageLVGUUID']] = diskInfo
                    else:
                        # get CoreStorageLVGUUID
                        searchCS = True
                        csInfo = _DictFromDiskutilCsInfo(partition.DeviceIdentifier)
                        if csInfo.get('MemberOfCoreStorageLogicalVolumeGroup'):
                            coreStorageDict[csInfo['MemberOfCoreStorageLogicalVolumeGroup']] = diskInfo
                        else:
                            raise Exception("No CS info found for %s" % partition.DeviceIdentifier)


                elif partition.Content == 'Apple_RAID':
                    diskInfo = filteredDiskInfo(partition.DeviceIdentifier)
                    appleRaidDict[diskInfo['RAIDMemberUUID']] = diskInfo
                
                elif partition.Content == 'Microsoft Basic Data':
                    diskInfo = filteredDiskInfo(partition.DeviceIdentifier)
                    volumeList.append(diskInfo)

        else:
            if disk.Content == 'Apple_HFS':
                diskInfo = filteredDiskInfo(disk.DeviceIdentifier)

                if diskInfo['BusProtocol'] == 'Disk Image':
                    # Skip Disk Images
                    continue

                if diskInfo.get('CoreStorageLVGUUID', 0):
                    # Update SMART status from Physical Volume
                    pv = coreStorageDict[diskInfo['CoreStorageLVGUUID']]
                    diskInfo.update({'SMARTStatus': pv['SMARTStatus']})

                if searchCS:
                    csInfo = _DictFromDiskutilCsInfo(disk.DeviceIdentifier)
                    if csInfo.get('MemberOfCoreStorageLogicalVolumeGroup'):
                        pv = coreStorageDict[csInfo['MemberOfCoreStorageLogicalVolumeGroup']]
                        diskInfo.update({'SMARTStatus': pv['SMARTStatus']})
                    else:
                        raise Exception("No CS info found for %s" % disk.DeviceIdentifier)


                if diskInfo.get('RAIDSetMembers', 0):
                    # Update SMART status from RAID members
                    for member in diskInfo['RAIDSetMembers']:
                        raidMember = appleRaidDict[member]
                        diskInfo.update({'SMARTStatus': raidMember['SMARTStatus']})
                        # If we find a irregular status, break
                        if raidMember['SMARTStatus'] not in ['Verified', 'Not Supported']:
                            break

                volumeList.append(diskInfo)

    return volumeList

# Create cache dir if it does not exist
cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
if not os.path.exists(cachedir):
    os.makedirs(cachedir)

# Write disk report to cache
plistlib.writePlist(DiskReport(), "%s/disk.plist" % cachedir)
