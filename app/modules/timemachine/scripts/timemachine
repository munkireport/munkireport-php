#! /usr/bin/python
# Time Machine menu code by frogor, wrapped by tuxudo for MunkiReport

import subprocess
import plistlib
import os
import sys
import platform

def getOsVersion():
    """Returns the minor OS version."""
    os_version_tuple = platform.mac_ver()[0].split('.')
    return int(os_version_tuple[1])

def get_time_machine():

    # Make the binary plist into xml for processing
    cmd = ['plutil', '-convert', 'xml1', '/Library/Preferences/com.apple.TimeMachine.plist']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    # Read in com.apple.TimeMachine.plist for processing 
    try:
        out = plistlib.readPlist('/Library/Preferences/com.apple.TimeMachine.plist')
    except Exception:
        return {}
    
    # If less than 10.12, run legacy log collector
    if getOsVersion() < 12:
        # Get legacy informtion, only supported on 10.6-10.11
        from subprocess import Popen, PIPE
        stdout = Popen("/usr/bin/syslog -F '$((Time)(utc)) $Message' -k Sender com.apple.backupd -k Time ge -7d -k Message R '^(Backup|Starting).*'", shell=True, stdout=PIPE).stdout
        output = stdout.read()
        out['legacy_output'] = output
    else:
        out['legacy_output'] = "Mac OS X 10.12+ not supported with legacy Time Machine log output"

        
    # Check if 10.9 or higher and extract extra data from Time Machine menu item. Extraction does not work on <10.8
    if getOsVersion() > 8:

        # Get extra data from menu item. Thanks frogor!
        from Foundation import NSBundle
        TMMenu = NSBundle.bundleWithPath_('/System/Library/CoreServices/Menu Extras/TimeMachine.menu')
        AppleTMSettings = TMMenu.classNamed_('AppleTMSettings')

        settings = AppleTMSettings.sharedSettings()

        current_dest = settings.currentDestination()

        # Check to make sure Time Machine is enabled
        if str(current_dest) != "None":

            # Commented out values never return anything but static data

            out['alias_volume_name'] = current_dest.aliasVolumeName()
            out['is_network_destination'] = str(current_dest.isNetworkDestination())
            out['network_url'] = str(current_dest.networkURL())
            out['mount_point'] = str(current_dest.mountPoint())
            #out['is_configured_destination'] = str(current_dest.isConfiguredDestination())
            #out['backup_state'] = str(current_dest.backupState())
            #out['percent_backed_up'] = str(current_dest.percentBackedUp())
            out['volume_display_name'] = str(current_dest.volumeDisplayName())
            out['server_display_name'] = str(current_dest.serverDisplayName())
            out['time_capsule_display_name'] = str(current_dest.timeCapsuleDisplayName())
            #out['update_pending'] = str(current_dest.updatePending())
            #out['latest_backup_result_severity'] = str(current_dest.latestBackupResultSeverity())
            #out['order'] = str(current_dest.order())
            #out['estimated_seconds_remaining'] = str(current_dest.estimatedSecondsRemaining())
            out['latestSnapshotDate'] = str(current_dest.latestSnapshotDate())
            #out['percent_converted'] = str(current_dest.percentConverted())
            #out['is_converting'] = str(current_dest.isConverting())
            out['earliest_snapshot_date'] = str(current_dest.earliestSnapshotDate())
            out['snapshot_count'] = str(current_dest.snapshotCount())

            return out

        else:

            return out
        
    else:
        return out
    
def main():
    
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print 'Manual check: skipping'
            exit(0)

    # Get results
    info = get_time_machine()
    
    # Write Time Machine results to cache file
    output_plist = os.path.join(cachedir, 'timemachine.plist')
    plistlib.writePlist(info, output_plist)

if __name__ == "__main__":
    main()