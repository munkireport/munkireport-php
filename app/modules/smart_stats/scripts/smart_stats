#! /usr/bin/python
# smart_stats script by tuxudo for MunkiReport

import subprocess
import plistlib
import os
import sys
import string
import re

def get_disks():
    
    disks = ""
    serials = ""
    
    cmd = ['diskutil','list']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()

    for item in output.split("\n"):
        if "/dev/disk" in item and "virtual" not in item and "disk image" not in item:
            
            item = re.sub('[^0-9]','', item.strip())
            
            cmd = [smartctl,'-i','/dev/disk'+item]
            proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                                    stdin=subprocess.PIPE,
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            (info_output, unused_error) = proc.communicate()
            
            # Check if disk supports SMART
            if "Operation not supported by device" not in info_output:
                # Duplicate serial number check
                for serial_item in info_output.split("\n"):
                    if 'Serial Number' in serial_item:
                        disk_serial = remove_all("Serial Number:", serial_item).strip()
                        # If serial isn't in serials string, add it and add the disk number
                        if disk_serial not in serials:
                            serials = disk_serial+serials
                            disks = re.sub('[^0-9]','', item.strip())+'\n'+disks
    
    return disks[:-1]
            
def get_smart_stats():

    smartinfo = []
    
    for disknum in get_disks().split("\n"):

        cmd = [smartctl, '-s','on','-a','/dev/disk'+disknum]
        proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (output, unused_error) = proc.communicate()

        output = output.replace("occurred at disk power-on lifetime: ", "occurred at disk power-on lifetime top: ", 1)
                
        disk = {}
        
        for item in output.split("\n"):
            if "Serial Number:" in item:
                disk['SerialNumber'] = remove_all("Serial Number:", item).strip()
                disk['DiskNumber'] = disknum
            elif "Critical Warning:" in item:
                disk['CriticalWarning'] = remove_all("Critical Warning:", item).strip()
            elif "Temperature:" in item:
                disk['Temperature_Celsius'] = re.sub('[^0-9]','', item.strip())
            elif "Available Spare:" in item:
                disk['AvailableSpare'] = re.sub('[^0-9]','', item.strip())
            elif "Available Spare Threshold:" in item:
                disk['AvailableSpareThreshold'] = re.sub('[^0-9]','', item.strip())
            elif "Percentage Used:" in item:
                disk['Percentage_Used'] = re.sub('[^0-9]','', item.strip())   
            elif "Data Units Read:" in item:
                disk['DataUnitsRead'] = remove_all("Data Units Read:", item).strip()
            elif "Data Units Written:" in item:
                disk['DataUnitsWritten'] = remove_all("Data Units Written:", item).strip()
            elif "Host Read Commands:" in item:
                disk['HostReadCommands'] = re.sub('[^0-9]','', item.strip())    
            elif "Host Write Commands:" in item:
                disk['HostWriteCommands'] = re.sub('[^0-9]','', item.strip())  
            elif "Controller Busy Time:" in item:
                disk['ControllerBusyTime'] = re.sub('[^0-9]','', item.strip()) 
            elif "Power Cycles:" in item:
                disk['Power_Cycle_Count'] = re.sub('[^0-9]','', item.strip())    
            elif "Power On Hours:" in item:
                disk['Power_On_Hours'] = re.sub('[^0-9]','', item.strip())      
            elif "Unsafe Shutdowns:" in item:
                disk['UnsafeShutdowns'] = re.sub('[^0-9]','', item.strip())   
            elif "Media and Data Integrity Errors:" in item:
                disk['MediaandDataIntegrityErrors'] = re.sub('[^0-9]','', item.strip())   
            elif "Error Information Log Entries:" in item:
                disk['ErrorInformationLogEntries'] = re.sub('[^0-9]','', item.strip())
            elif "Controller ID:" in item:
                disk['ControllerID'] = re.sub('[^0-9]','', item.strip())   
            elif "Number of Namespaces:" in item:
                disk['NumberofNamespaces'] = re.sub('[^0-9]','', item.strip())    
            elif "Model Number:" in item:
                disk['ModelNumber'] = remove_all("Model Number:", item).strip()
            elif "PCI Vendor/Subsystem ID:" in item:
                disk['PCIVendorSubsystemID'] = remove_all("PCI Vendor/Subsystem ID:", item).strip()
            elif "IEEE OUI Identifier:" in item:
                disk['IEEEOUIIdentifier'] = remove_all("IEEE OUI Identifier:", item).strip()
            elif "Firmware Updates (0x06):" in item:
                disk['FirmwareUpdates0x06'] = remove_all("Firmware Updates (0x06):", item).strip()
            elif "Optional Admin Commands (0x0006):" in item:
                disk['OptionalAdminCommands0x0006'] = remove_all("Optional Admin Commands (0x0006):", item).strip()
            elif "Optional NVM Commands (0x001f):" in item:
                disk['OptionalNVMCommands0x001f'] = remove_all("Optional NVM Commands (0x001f):", item).strip()
            elif "Maximum Data Transfer Size:" in item:
                disk['MaximumDataTransferSize'] = remove_all("Maximum Data Transfer Size:", item).strip()
            elif "Model Family:" in item:
                disk['ModelFamily'] = remove_all("Model Family:", item).strip()
            elif "Device Model:" in item:
                disk['DeviceModel'] = remove_all("Device Model:", item).strip()
            elif "LU WWN Device Id:" in item:
                disk['LUWWNDeviceID'] = remove_all("LU WWN Device Id:", item).strip()
            elif "Firmware Version:" in item:
                disk['FirmwareVersion'] = remove_all("Firmware Version:", item).strip()
            elif "User Capacity:    " in item:
                disk['UserCapacity'] = remove_all("User Capacity:    ", item).strip()
            elif "Sector Size:" in item:
                disk['SectorSize'] = remove_all("Sector Size:", item).strip()
            elif "Rotation Rate:" in item:
                disk['RotationRate'] = remove_all("Rotation Rate:", item).strip()
            elif "Form Factor:" in item:
                disk['FormFactor'] = remove_all("Form Factor:", item).strip()
            elif "Device is:" in item:
                disk['Deviceis'] = remove_all("[for details use: -P show]", remove_all("Device is:", item)).strip()
            elif "ATA Version is:" in item and "SATA Version is:" not in item:
                disk['ATAVersionis'] = remove_all("ATA Version is:", item).strip()
            elif "SATA Version is:" in item:
                disk['SATAVersionis'] = remove_all("SATA Version is:", item).strip()
            elif "SMART support is:" in item and "vailable" in item:
                disk['SMARTis'] = remove_all("SMART support is:", item).strip()
            elif "SMART support is:" in item and "abled" in item:
                disk['SMARTsupportis'] = remove_all("SMART support is:", item).strip()
            elif "SMART overall-health self-assessment test result: " in item:
                disk['Overall_Health'] = remove_all("SMART overall-health self-assessment test result: ", item).strip()
            elif "ATA Error Count: " in item:
                disk['error_count'] = re.sub('[^0-9]','', item.strip())   
            elif "occurred at disk power-on lifetime top: " in item:
                disk['ErrorPoH'] = re.sub('[^0-9]','', item.split()[8])
                print re.sub('[^0-9]','', item.split()[8])
            elif "Raw_Read_Error_Rate" in item:
                disk['Raw_Read_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Throughput_Performance" in item:
                disk['Throughput_Performance'] = re.sub('[^0-9]','', item.split()[9])
            elif "Spin_Up_Time" in item:
                disk['Spin_Up_Time'] = re.sub('[^0-9]','', item.split()[9])
            elif "Start_Stop_Count" in item:
                disk['Start_Stop_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Reallocated_Sector_Ct" in item:
                disk['Reallocated_Sector_Ct'] = re.sub('[^0-9]','', item.split()[9])
            elif "Seek_Error_Rate" in item:
                disk['Seek_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Seek_Time_Performance" in item:
                disk['Seek_Time_Performance'] = re.sub('[^0-9]','', item.split()[9])
            elif "Power_On_Hours" in item and "Power_On_Hours_and_Msec" not in item:
                disk['Power_On_Hours'] = re.sub('[^0-9]','', item.split()[9])
            elif "Spin_Retry_Count" in item:
                disk['Spin_Retry_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Power_Cycle_Count" in item:
                disk['Power_Cycle_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Power-Off_Retract_Count" in item:
                disk['PowerOff_Retract_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Load_Cycle_Count" in item:
                disk['Load_Cycle_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Temperature_Celsius" in item:
                disk['Temperature_Celsius'] = item.split()[9].strip()
            elif "Reallocated_Event_Count" in item:
                disk['Reallocated_Event_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Current_Pending_Sector" in item:
                disk['Current_Pending_Sector'] = re.sub('[^0-9]','', item.split()[9])
            elif "Offline_Uncorrectable" in item:
                disk['Offline_Uncorrectable'] = re.sub('[^0-9]','', item.split()[9])
            elif "UDMA_CRC_Error_Count" in item:
                disk['UDMA_Error_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Disk_Shift" in item:
                disk['Disk_Shift'] = re.sub('[^0-9]','', item.split()[9])
            elif "Loaded_Hours" in item:
                disk['Loaded_Hours'] = re.sub('[^0-9]','', item.split()[9])
            elif "Load_Retry_Count" in item:
                disk['Load_Retry_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Load_Friction" in item:
                disk['Load_Friction'] = re.sub('[^0-9]','', item.split()[9])
            elif "Load-in_Time" in item:
                disk['Loadin_Time'] = re.sub('[^0-9]','', item.split()[9])
            elif "Head_Flying_Hours" in item:
                disk['Head_Flying_Hours'] = re.sub('[^0-9]','', item.split()[9].split("+")[0]).strip()
            elif "Read_Channel_Margin" in item:
                disk['Read_Channel_Margin'] = re.sub('[^0-9]','', item.split()[9])
            elif "Calibration_Retry_Count" in item:
                disk['Calibration_Retry_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Read_Soft_Error_Rate" in item:
                disk['Read_Soft_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Program_Fail_Count_Chip" in item:
                disk['Program_Fail_Count_Chip'] = re.sub('[^0-9]','', item.split()[9])
            elif "Erase_Fail_Count_Chip" in item:
                disk['Erase_Fail_Count_Chip'] = re.sub('[^0-9]','', item.split()[9])
            elif "Wear_Leveling_Count" in item:
                disk['Wear_Leveling_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Used_Rsvd_Blk_Cnt_Chip" in item:
                disk['Used_Rsvd_Blk_Cnt_Chip'] = re.sub('[^0-9]','', item.split()[9])
            elif "Used_Rsvd_Blk_Cnt_Tot" in item:
                disk['Used_Rsvd_Blk_Cnt_Tot'] = re.sub('[^0-9]','', item.split()[9])
            elif "Unused_Rsvd_Blk_Cnt_Tot" in item:
                disk['Unused_Rsvd_Blk_Cnt_Tot'] = re.sub('[^0-9]','', item.split()[9])
            elif "Program_Fail_Cnt_Total" in item:
                disk['Program_Fail_Cnt_Total'] = re.sub('[^0-9]','', item.split()[9])
            elif "Erase_Fail_Count_Total" in item:
                disk['Erase_Fail_Count_Total'] = re.sub('[^0-9]','', item.split()[9])
            elif "Runtime_Bad_Block" in item:
                disk['Runtime_Bad_Block'] = re.sub('[^0-9]','', item.split()[9])
            elif "End-to-End_Error" in item:
                disk['EndtoEnd_Error'] = re.sub('[^0-9]','', item.split()[9])
            elif "Reported_Uncorrect" in item:
                disk['Reported_Uncorrect'] = re.sub('[^0-9]','', item.split()[9])
            elif "Command_Timeout" in item:
                disk['Command_Timeout'] = re.sub('[^0-9]','', item.split()[9])
            elif "High_Fly_Writes" in item:
                disk['High_Fly_Writes'] = re.sub('[^0-9]','', item.split()[9])
            elif "Airflow_Temperature_Cel" in item:
                disk['Airflow_Temperature_Cel'] = item.split()[9].strip()
            elif "G-Sense_Error_Rate" in item:
                disk['GSense_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Soft_ECC_Correction" in item:
                disk['Soft_ECC_Correction'] = re.sub('[^0-9]','', item.split()[9])
            elif "Hardware_ECC_Recovered" in item:
                disk['Hardware_ECC_Recovered'] = re.sub('[^0-9]','', item.split()[9])
            elif "Multi_Zone_Error_Rate" in item:
                disk['Multi_Zone_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Soft_Read_Error_Rate" in item:
                disk['Soft_Read_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Data_Address_Mark_Errs" in item:
                disk['Data_Address_Mark_Errs'] = re.sub('[^0-9]','', item.split()[9])
            elif "Run_Out_Cancel" in item:
                disk['Run_Out_Cancel'] = re.sub('[^0-9]','', item.split()[9])
            elif "Thermal_Asperity_Rate" in item:
                disk['Thermal_Asperity_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Flying_Height" in item:
                disk['Flying_Height'] = re.sub('[^0-9]','', item.split()[9])
            elif "Spin_High_Current" in item:
                disk['Spin_High_Current'] = re.sub('[^0-9]','', item.split()[9])
            elif "Spin_Buzz" in item:
                disk['Spin_Buzz'] = re.sub('[^0-9]','', item.split()[9])
            elif "Offline_Seek_Performnce" in item:
                disk['Offline_Seek_Performnce'] = re.sub('[^0-9]','', item.split()[9])
            elif "Power_On_Hours_and_Msec" in item:
                disk['Power_On_Hours_and_Msec'] = item.split()[9].strip()
                disk['Power_On_Hours'] = re.sub('[^0-9]','', item.split()[9].split("+")[0]).strip()
            elif "Torq-amp_Count" in item:
                disk['Torqamp_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Head_Amplitude" in item:
                disk['Head_Amplitude'] = re.sub('[^0-9]','', item.split()[9])
            elif "Available_Reservd_Space" in item:
                disk['Available_Reservd_Space'] = re.sub('[^0-9]','', item.split()[9])
            elif "Media_Wearout_Indicator" in item:
                disk['Media_Wearout_Indicator'] = re.sub('[^0-9]','', item.split()[9])
            elif "Total_LBAs_Written" in item:
                disk['Total_LBAs_Written'] = re.sub('[^0-9]','', item.split()[9])
            elif "Total_LBAs_Read" in item:
                disk['Total_LBAs_Read'] = re.sub('[^0-9]','', item.split()[9])
            elif "Read_Error_Retry_Rate" in item:
                disk['Read_Error_Retry_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Host_Reads_MiB" in item:
                disk['Host_Reads_MiB'] = re.sub('[^0-9]','', item.split()[9])
            elif "Host_Writes_MiB" in item:
                disk['Host_Writes_MiB'] = re.sub('[^0-9]','', item.split()[9])
            elif "Grown_Failing_Block_Ct" in item:
                disk['Grown_Failing_Block_Ct'] = re.sub('[^0-9]','', item.split()[9])
            elif "Unexpect_Power_Loss_Ct" in item:
                disk['Unexpect_Power_Loss_Ct'] = re.sub('[^0-9]','', item.split()[9])
            elif "Non4k_Aligned_Access" in item:
                disk['Non4k_Aligned_Access'] = re.sub('[^0-9]','', item.split()[9])
            elif "SATA_Iface_Downshift" in item:
                disk['SATA_Iface_Downshift'] = re.sub('[^0-9]','', item.split()[9])
            elif "Factory_Bad_Block_Ct" in item:
                disk['Factory_Bad_Block_Ct'] = re.sub('[^0-9]','', item.split()[9])
            elif "Percent_Lifetime_Used" in item:
                disk['Percent_Lifetime_Used'] = re.sub('[^0-9]','', item.split()[9])
            elif "Write_Error_Rate" in item:
                disk['Write_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "Reallocate_NAND_Blk_Cnt" in item:
                disk['Reallocate_NAND_Blk_Cnt'] = re.sub('[^0-9]','', item.split()[9])
            elif "Ave_Block-Erase_Count" in item:
                disk['Ave_BlockErase_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Perc_Rated_Life_Used" in item:
                disk['Perc_Rated_Life_Used'] = re.sub('[^0-9]','', item.split()[9])
            elif "Bckgnd_Program_Page_Cnt" in item:
                disk['Bckgnd_Program_Page_Cnt'] = re.sub('[^0-9]','', item.split()[9])
            elif "Total_Host_Sector_Write" in item:
                disk['Total_Host_Sector_Write'] = re.sub('[^0-9]','', item.split()[9])
            elif "Unused_Reserve_NAND_Blk" in item:
                disk['Unused_Reserve_NAND_Blk'] = re.sub('[^0-9]','', item.split()[9])
            elif "SATA_Interfac_Downshift" in item:
                disk['SATA_Interfac_Downshift'] = re.sub('[^0-9]','', item.split()[9])
            elif "SSD_Life_Left" in item:
                disk['SSD_Life_Left'] = re.sub('[^0-9]','', item.split()[9])
            elif "Life_Curve_Status" in item:
                disk['Life_Curve_Status'] = re.sub('[^0-9]','', item.split()[9])
            elif "SuperCap_Health" in item:
                disk['SuperCap_Health'] = re.sub('[^0-9]','', item.split()[9])
            elif "Lifetime_Writes_GiB" in item:
                disk['Lifetime_Writes_GiB'] = re.sub('[^0-9]','', item.split()[9])
            elif "Lifetime_Reads_GiB" in item:
                disk['Lifetime_Reads_GiB'] = re.sub('[^0-9]','', item.split()[9])
            elif "Uncorrectable_Error_Cnt" in item:
                disk['Uncorrectable_Error_Cnt'] = re.sub('[^0-9]','', item.split()[9])
            elif "ECC_Error_Rate" in item:
                disk['ECC_Error_Rate'] = re.sub('[^0-9]','', item.split()[9])
            elif "CRC_Error_Count" in item and "UDMA_CRC_Error_Count" not in item:
                disk['CRC_Error_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Supercap_Status" in item:
                disk['Supercap_Status'] = re.sub('[^0-9]','', item.split()[9])
            elif "Exception_Mode_Status" in item:
                disk['Exception_Mode_Status'] = re.sub('[^0-9]','', item.split()[9])
            elif "POR_Recovery_Count" in item:
                disk['POR_Recovery_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Total_Reads_GiB" in item:
                disk['Total_Reads_GiB'] = re.sub('[^0-9]','', item.split()[9])
            elif "Total_Writes_GiB" in item:
                disk['Total_Writes_GiB'] = re.sub('[^0-9]','', item.split()[9])
            elif "Thermal_Throttle" in item:
                disk['Thermal_Throttle'] = re.sub('[^0-9]','', item.split()[9])
            elif "Host_Program_Page_Count" in item:
                disk['Host_Program_Page_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Perc_Write-Erase_Count" in item:
                disk['Perc_WriteErase_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Perc_Avail_Resrvd_Space" in item:
                disk['Perc_Avail_Resrvd_Space'] = re.sub('[^0-9]','', item.split()[9])
            elif "Perc_Write-Erase_Ct_BC" in item:
                disk['Perc_WriteErase_Ct_BC'] = re.sub('[^0-9]','', item.split()[9])
            elif "Success_RAIN_Recov_Cnt" in item:
                disk['Success_RAIN_Recov_Cnt'] = re.sub('[^0-9]','', item.split()[9])
            elif "SATA_PHY_Error" in item:
                disk['SATA_PHY_Error'] = re.sub('[^0-9]','', item.split()[9])
            elif "Avg_Write-Erase_Count" in item:
                disk['Avg_WriteErase_Count'] = re.sub('[^0-9]','', item.split()[9])
            elif "Free_Fall_Sensor" in item:
                disk['Free_Fall_Sensor'] = re.sub('[^0-9]','', item.split()[9])      
        
        smartinfo.append(disk)
        
#    print smartinfo
    return smartinfo


def remove_all(substr, str):
    index = 0
    length = len(substr)
    while string.find(str, substr) != -1:
        index = string.find(str, substr)
        str = str[0:index] + str[index+length:]
    return str
    
def main():
    
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print 'Manual check: skipping'
            exit(0)
        
    global smartctl
        
    # Locate smartctl binary
    if (os.path.isfile('/usr/local/sbin/smartctl')):
        smartctl = '/usr/local/sbin/smartctl'
    elif (os.path.isfile('/usr/local/bin/smartctl')):
        smartctl = '/usr/local/bin/smartctl'
    else:
        print 'Could not find smartctl. Is Smartmontools installed?'
        exit(0)

    # Get results
    info = get_smart_stats()
    
    if (all(info)):
        # Write smart results to cache file
        output_plist = os.path.join(cachedir, 'smart_stats.plist')
        plistlib.writePlist(info, output_plist)
        #print plistlib.writePlistToString(info)
    else:
        # Delete cache file if there are no supported drives
        if (os.path.isfile(cachedir+'/smart_stats.plist')):
            os.remove(cachedir+'/smart_stats.plist')

if __name__ == "__main__":
    main()
