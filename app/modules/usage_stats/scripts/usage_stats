#!/usr/bin/python
# Script by Bochoven

import os, sys, plistlib, subprocess, platform


def getOsVersion():
    """Returns the minor OS version."""
    os_version_tuple = platform.mac_ver()[0].split('.')
    return int(os_version_tuple[1])

def get_usage_metrics():
    cmd = ['/usr/bin/powermetrics', '--show-initial-usage', ' -s',
            'network,disk', '-f', 'plist', '-n', '0']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = proc.communicate()
    plist = plistlib.readPlistFromString(output.rstrip(' \t\r\n\0'))

    cmd = ['/usr/bin/powermetrics', '-s', 
            'cpu_power,gpu_power,thermal,battery', '-n', '1', '-f', 'plist']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = proc.communicate()
    plist.update(plistlib.readPlistFromString(output.rstrip(' \t\r\n\0')))

    return plist
    
def parse_usage_plist(plist):
    usage_info = {}
    for item in plist:
        if item == 'timestamp':
            try:
                usage_info['timestamp'] = plist[item]
            except:
                usage_info['error'] = '' 
        elif item == 'thermal_pressure':
            try:
                usage_info['thermal_pressure'] = plist[item]
            except:
                usage_info['error'] = '' 
        elif item == 'backlight':
            try:
                usage_info['backlight_max'] = plist[item]['max']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['backlight_min'] = plist[item]['min']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['backlight'] = plist[item]['value']
            except:
                usage_info['error'] = '' 
        elif item == 'keyboard_backlight':
            try:
                usage_info['keyboard_backlight'] = plist[item]['value']
            except:
                usage_info['error'] = '' 
        elif item == 'network':
            try:
                usage_info['ibyte_rate'] = plist[item]['ibyte_rate']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['ibytes'] = plist[item]['ibytes']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['ipacket_rate'] = plist[item]['ipacket_rate']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['ipackets'] = plist[item]['ipackets']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['obyte_rate'] = plist[item]['obyte_rate']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['obytes'] = plist[item]['obytes']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['opacket_rate'] = plist[item]['opacket_rate']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['opackets'] = plist[item]['opackets']
            except:
                usage_info['error'] = '' 
        elif item == 'disk':
            try:
                usage_info['rbytes_per_s'] = plist[item]['rbytes_per_s']
            except:
                usage_info['error'] = '' 
            try: 
                usage_info['rops_per_s'] = plist[item]['rops_per_s']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['wbytes_per_s'] = plist[item]['wbytes_per_s']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['wops_per_s'] = plist[item]['wops_per_s']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['rbytes_diff'] = plist[item]['rbytes_diff']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['rops_diff'] = plist[item]['rops_diff']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['wbytes_diff'] = plist[item]['wbytes_diff']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['wops_diff'] = plist[item]['wops_diff']
            except:
                usage_info['error'] = '' 
        elif item == 'processor':
            try:
                usage_info['package_watts'] = plist[item]['package_watts']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['package_joules'] = plist[item]['package_joules']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['freq_hz'] = plist[item]['freq_hz']
            except:
                usage_info['error'] = '' 
            try:
                usage_info['freq_ratio'] = plist[item]['freq_ratio']
            except:
                usage_info['error'] = '' 
        elif item == 'GPU':
            try:
                usage_info['gpu_name'] = plist[item][0]['name'].replace("IntelIG", "Intel iGPU")
            except:
                usage_info['error'] = ''
            try:
                usage_info['gpu_freq_hz'] = plist[item][0]['freq_hz']
            except:
                usage_info['error'] = ''
            try:
                usage_info['gpu_freq_mhz'] = plist[item][0]['freq_mhz']
            except:
                usage_info['error'] = ''
            try:
                usage_info['gpu_freq_ratio'] = plist[item][0]['freq_ratio']
            except:
                usage_info['error'] = ''
            try:
                usage_info['gpu_busy'] = plist[item][0]['misc_counters']['GPU Busy']
            except:
                usage_info['error'] = ''
        elif item == 'kern_bootargs':
            try:
                usage_info['kern_bootargs'] = plist[item]
            except:
                usage_info['error'] = ''  
    return usage_info

def main():
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print 'Manual check: skipping'
            exit(0)
            
    # If less than 10.10, skip and write empty file
    if getOsVersion() < 10:
        
        result = dict()
        # Write results to cache
        output_plist = os.path.join(cachedir, 'usage_stats.plist')
        plistlib.writePlist(result, output_plist)
        
    else :
        
        # Get results
        result = dict()
        info = get_usage_metrics()
        result = parse_usage_plist(info)

        # Write results to cache
        output_plist = os.path.join(cachedir, 'usage_stats.plist')
        plistlib.writePlist(result, output_plist)
        

if __name__ == "__main__":
    main()